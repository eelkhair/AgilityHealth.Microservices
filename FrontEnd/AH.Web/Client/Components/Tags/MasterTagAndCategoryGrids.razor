@using AH.Metadata.Shared.V1.Models.Responses.MasterTagCategories
@using System.Text.Json
@using System.Text
@using System.Net
@inject HttpClient Http

<div class="tags-half">
    <TelerikGrid Data="@_gridCategories"
                 EditMode="@GridEditMode.Popup"
                 FilterMode="@GridFilterMode.FilterMenu"
                 EnableLoaderContainer="@ShowLoading"
                 Sortable="true"
                 Height="600px"
                 OnUpdate="@UpdateCategoryHandler"
                 OnAdd="@AddCategoryHandler"
                 OnEdit="@EditCategoryHandler"
                 OnCreate="@CreateCategoryHandler"
                 OnDelete="@DeleteCategoryHandler"
                 SelectionMode="@GridSelectionMode.Single"
                 ConfirmDelete="true"
                 OnRowClick="@( async args => { await CategoryClicked(args); })">
        <GridToolBarTemplate>
            <GridCommandButton Command="Add">Add Category</GridCommandButton>
        </GridToolBarTemplate>
        <GridColumns>
            <GridColumn Field="@nameof(MasterTagCategoryResponse.Name)" Title="Name"/>
            <GridColumn Field="@nameof(MasterTagCategoryResponse.Type)" Title="Type">
                <EditorTemplate>
                    @{
                        _selectedCategory = (MasterTagCategoryResponse) context;
                        <TelerikDropDownList Data="@_types"
                                             @bind-Value="@_selectedCategory.Type"
                        >
                            <DropDownListSettings>
                                <DropDownListPopupSettings Height="auto" />
                            </DropDownListSettings>
                        </TelerikDropDownList>
                    }
                </EditorTemplate>
                <Template>
                    @((context as MasterTagCategoryResponse)?.Type == string.Empty ? "All" : (context as MasterTagCategoryResponse)?.Type)
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(MasterTagCategoryResponse.ClassName)" Visible="false"/>
            <GridCommandColumn>
                <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
                <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
</div>
<div class="k-master-row">
    @if (_tagCategory != null)
    {
        <TelerikGrid Data="@Tags"
                     EditMode="@GridEditMode.Popup"
                     FilterMode="@GridFilterMode.FilterMenu"
                     EnableLoaderContainer="@ShowLoading"
                     Sortable="true"
                     Height="600px"
                     SelectionMode="@GridSelectionMode.Single"
                     ConfirmDelete="true">
            <GridToolBarTemplate>
                <GridCommandButton Command="Add">Add Tag</GridCommandButton>
            </GridToolBarTemplate>
            <GridColumns>
                <GridColumn Field="@nameof(MasterTagCategoryResponse.Name)" Title="Name"/>
                <GridColumn Field="@nameof(MasterTagCategoryResponse.ClassName)" Visible="false"/>
                <GridCommandColumn>
                    <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
                    <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
                </GridCommandColumn>
            </GridColumns>
        </TelerikGrid>
    }
</div>
@code {
    [Parameter] public string? ClassName { get; set; }

    [Inject] private IJSRuntime Javascript { get; set; } = null!;
    
    private List<MasterTagCategoryResponse> _categories = new();
    private List<MasterTagCategoryResponse> _gridCategories = new();
    private MasterTagCategoryResponse _selectedCategory = new();
    private MasterTagCategoryResponse? _tagCategory;
    private List<string> _types = new() { "All", "Individual", "Team", "MultiTeam", "Enterprise" };
    bool ShowLoading { get; set; } = true;
    
    private List<MasterTagCategoryResponse> Tags { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        _selectedCategory.Type = "All";
        var response = await Http.GetAsync("masterTagCategories");
        _categories = await response.Content.ReadFromJsonAsync<List<MasterTagCategoryResponse>>() ?? new List<MasterTagCategoryResponse>();
        await RefreshCategoryGrid();
    }
#region Category
    private async Task RefreshCategoryGrid()
    {
        _gridCategories = _categories.Where(x => x.ClassName == ClassName).ToList();
        await Javascript.InvokeVoidAsync("console.log", $"Number Of Categories - {ClassName} - " + _gridCategories.Count);

        StateHasChanged();
    }

    private async Task CreateCategoryHandler(GridCommandEventArgs args)
    {
        var category = (MasterTagCategoryResponse)args.Item;
        category.ClassName = ClassName;
        var stringContent = new StringContent(JsonSerializer.Serialize(category), Encoding.UTF8, "application/json");

        var response = await Http.PostAsync("masterTagCategories", stringContent);
        var createdCategory = await response.Content.ReadFromJsonAsync<MasterTagCategoryResponse>();
        await Javascript.InvokeVoidAsync("console.log", createdCategory);
        _categories.Add(createdCategory!);
        await RefreshCategoryGrid();
    }

    private async Task UpdateCategoryHandler(GridCommandEventArgs args)
    {
        var category = (MasterTagCategoryResponse)args.Item;
        var stringContent = new StringContent(JsonSerializer.Serialize(category), Encoding.UTF8, "application/json");
        var response = await Http.PutAsync("masterTagCategories", stringContent);
        var updatedCategory = await response.Content.ReadFromJsonAsync<MasterTagCategoryResponse>() ?? new MasterTagCategoryResponse();
        await Javascript.InvokeVoidAsync("console.log", updatedCategory);

        if (_categories.Exists(y => y.UId == updatedCategory.UId))
        {
            _categories.First(x => x.UId == updatedCategory.UId).Name = updatedCategory.Name;
            _categories.First(x => x.UId == updatedCategory.UId).Type = updatedCategory.Type;
        }

        await RefreshCategoryGrid();
    }

    private async Task DeleteCategoryHandler(GridCommandEventArgs arg)
    {
        var category = (MasterTagCategoryResponse)arg.Item;
        var response = await Http.DeleteAsync($"mastertagcategories/{category.UId}");
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            _categories.Remove(_categories.First(x => x.UId == category.UId));
            await RefreshCategoryGrid();
        }
    }
    
    private void AddCategoryHandler(GridCommandEventArgs arg)
    {
        var category = (MasterTagCategoryResponse)arg.Item;
        category.Type = "All";
    }

    private void EditCategoryHandler(GridCommandEventArgs arg)
    {
        var category = (MasterTagCategoryResponse)arg.Item;

        if (category.Type == string.Empty)
        {
            category.Type = "All";
        }
    }
#endregion
    private async Task CategoryClicked(GridRowClickEventArgs args)
    {
        _tagCategory = (MasterTagCategoryResponse)args.Item;
        var response = await Http.GetAsync($"MasterTags/MasterTags/Category/{_tagCategory.UId}");
        Tags = await response.Content.ReadFromJsonAsync<List<MasterTagCategoryResponse>>() ?? new List<MasterTagCategoryResponse>();
        StateHasChanged();
    }

#region Tag

#endregion
}
<style>
    .tags-half{
        display: inline-block;
        width: 49%;
        float: left;
        padding: 0 10px;
        
    }
    .k-master-row{
        cursor: pointer;
    }
</style>
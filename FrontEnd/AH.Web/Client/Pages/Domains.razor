@page "/domains"
@layout AdminLayout
@using AH.Metadata.Shared.V1.Models.Responses.Domains
@using System.Text.Json
@using System.Text

@inject HttpClient Http;
@attribute [Authorize]
<h1>Domains</h1>

<TelerikGrid Data="@_domains"
             EditMode="@GridEditMode.Popup"
             FilterMode="@GridFilterMode.FilterMenu"
             EnableLoaderContainer="true"
             Sortable="true"
             OnAdd="@AddHandler"
             OnEdit="@EditHandler"
             OnCreate="@CreateHandler"
             OnUpdate="@UpdateHandler"
             OnDelete="@DeleteHandler"
             ConfirmDelete="true">
    <GridToolBarTemplate>
        <GridCommandButton Command="Add">Add Domain</GridCommandButton>
    </GridToolBarTemplate> 
    <DetailTemplate>
        @{
            var domain = (DomainWithCompaniesResponse)context;
            <DomainCompanyGrid Companies="@domain.Companies" DomainUId="@domain.UId" DomainName="@domain.Name" />
        }
    </DetailTemplate>
    <GridColumns>
        <GridColumn Field="@nameof(DomainWithCompaniesResponse.Name)" Title="Name"/>
        <GridCommandColumn>
            <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
    <GridSettings>
            <GridPopupEditSettings Title="@_popupTitle"></GridPopupEditSettings>
        </GridSettings>
</TelerikGrid>
@code{
    private string _popupTitle = "Add Domain";
    private List<DomainWithCompaniesResponse> _domains = new();
    [Inject] IJSRuntime Javascript { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        _domains = await Http.GetFromJsonAsync<List<DomainWithCompaniesResponse>>("api/domains") ?? new List<DomainWithCompaniesResponse>();
        await Javascript.InvokeVoidAsync("console.log", _domains);
    }

    private async Task CreateHandler(GridCommandEventArgs arg)
    {
        var domain = (DomainWithCompaniesResponse) arg.Item;
        var stringContent = new StringContent(JsonSerializer.Serialize(domain), Encoding.UTF8, "application/json");
        
        var response = await Http.PostAsync("api/domains", stringContent);
        
        if (response.IsSuccessStatusCode)
        {
            var createdDomain = await response.Content.ReadFromJsonAsync<DomainWithCompaniesResponse>();
            _domains.Add(createdDomain!);
        }
        StateHasChanged();
    }
    
    private async Task UpdateHandler(GridCommandEventArgs arg)
    {
        var domain = (DomainWithCompaniesResponse) arg.Item;
        var stringContent = new StringContent(JsonSerializer.Serialize(domain), Encoding.UTF8, "application/json");
        
        var response = await Http.PutAsync($"api/domains", stringContent);
        
        if (response.IsSuccessStatusCode)
        {
            var index = _domains.FindIndex(x => x.UId == domain.UId);
            _domains[index] = domain;
        }
        StateHasChanged();
    }

    private async Task DeleteHandler(GridCommandEventArgs arg)
    {
        _popupTitle = "Delete Domain";
        var domain = (DomainWithCompaniesResponse) arg.Item;
        var response = await Http.DeleteAsync($"api/domains/{domain.UId}");
        
        if (response.IsSuccessStatusCode)
        {
            _domains.Remove(domain);
        }
    }

    private void AddHandler()
    {
         _popupTitle = "Add Domain";
    } 
    
    private void EditHandler()
    {
        _popupTitle = "Edit Domain";
    }

}
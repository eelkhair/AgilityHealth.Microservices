@using AH.Company.Shared.V1.Models.Tags.Responses
@using AH.Company.Shared.V1.Models.Companies.Responses
@inject HttpClient Http
<div class="tags-forty">
     <TelerikGrid Data="@_gridCategories"
                 EditMode="@GridEditMode.Popup"
                 FilterMode="@GridFilterMode.FilterMenu"
                 EnableLoaderContainer="true"
                 Sortable="true"
                 Height="600px"
                 OnUpdate="@UpdateCategoryHandler"
                 OnAdd="@AddCategoryHandler"
                 OnEdit="@EditCategoryHandler"
                 OnCreate="@CreateCategoryHandler"
                 OnDelete="@DeleteCategoryHandler"
                 OnCancel="@CancelCategoryHandler"
                 SelectionMode="@GridSelectionMode.Single"
                 ConfirmDelete="true"
                 OnRowClick="@( async args => { await CategoryClicked(args); })">
        <GridToolBarTemplate>
            <GridCommandButton Command="Add" Icon = "@SvgIcon.Plus">Add Category</GridCommandButton>
        </GridToolBarTemplate>
        <GridColumns>
            <GridColumn Field="@nameof(CompanyCategoryResponse.Name)" Title="Name"/>
            <GridColumn Field="@nameof(CompanyCategoryResponse.Type)" Title="Type">
                <EditorTemplate>
                    @{
                        _selectedCategory = (CompanyCategoryResponse) context;
                        <TelerikDropDownList Data="@_types"
                                             OnChange="@CategoryTypeChanged"
                                             @bind-Value="@_selectedCategory.Type">
                            <DropDownListSettings>
                                <DropDownListPopupSettings Height="auto" />
                            </DropDownListSettings>
                        </TelerikDropDownList>
                    }
                </EditorTemplate>
                <Template>
                    @((context as CompanyCategoryResponse)?.Type == string.Empty ? "All" : (context as CompanyCategoryResponse)?.Type)
                </Template>
            </GridColumn>
            <GridColumn Field="MasterTagCategory.UId" Title="Master Category" Visible="@CategoryEditMode" >
                <EditorTemplate>
                    @{
                        _selectedCategory = (CompanyCategoryResponse) context;
                        <TelerikDropDownList Data="@_currentMasterTagCategories"
                                             ValueField="UId"
                                             TextField="Name"
                                             @bind-Value="@_selectedCategory.MasterTagCategory!.UId">
                            <DropDownListSettings>
                                <DropDownListPopupSettings Height="auto" />
                            </DropDownListSettings>
                        </TelerikDropDownList>
                    }
                </EditorTemplate>
                <Template>
                    @((context as CompanyCategoryResponse)?.MasterTagCategory?.Name)
                </Template>
            </GridColumn>
            <GridCommandColumn>
                <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
                <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
         <GridSettings>
                <GridPopupEditSettings Title="@_gridTitle"></GridPopupEditSettings>
            </GridSettings>
    </TelerikGrid>
</div>
<div class="k-master-row">
    @if (_selectedCategory != null)
    {
        <TelerikGrid Data="@_tags"
                     EditMode="@GridEditMode.Popup"
                     FilterMode="@GridFilterMode.FilterMenu"
                     EnableLoaderContainer="true"
                     Sortable="true"
                     Height="600px"
                     OnAdd="@AddTagHandler"
                     OnEdit="@EditTagHandler"
                     OnCreate="@CreateTagHandler"
                     OnDelete="@DeleteTagHandler"
                     OnUpdate="@UpdateTagHandler"
                     ConfirmDelete="true">
            <GridToolBarTemplate>
                <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add Tag</GridCommandButton>
            </GridToolBarTemplate>
            <GridColumns>
                <GridColumn Field="@nameof(CompanyTagResponse.Name)" Title="Name"/>
                @if (TabType == "TeamMember")
                {
                    <GridColumn Field="CompanyTeamTag.CompanyCategory.UId" Title="Company Team Category" Visible="@(_selectedCategory.Name == "Role")">
                        <Template>
                            @((context as CompanyTagResponse)?.CompanyTeamTag?.CompanyCategory?.Name)
                        </Template>
                        <EditorTemplate>
                            @{
                                var tag = (CompanyTagResponse) context;
                                <TelerikDropDownList @bind-Value="@tag.CompanyTeamTag!.CompanyCategory!.UId"
                                                     ValueField="@nameof(CompanyCategoryResponse.UId)"
                                                     TextField="@nameof(CompanyCategoryResponse.Name)"
                                                     DefaultText="Select Category"
                                                     OnChange="@CurrentCategoryChanged"
                                                     Data="@_currentCompanyCategories.Where(x=> x.Name != "Methodology" && x.Type == _selectedCategory.Type).ToList()">
                                    <DropDownListSettings>
                                        <DropDownListPopupSettings Height="auto" MaxHeight="200px" />
                                    </DropDownListSettings>
                                </TelerikDropDownList>
                            }
                        </EditorTemplate>
                    </GridColumn>
                    <GridColumn Field="CompanyTeamTag.UId" Title="Company Team Tag" Visible="@(_selectedCategory.Name == "Role")">
                        <Template>
                            @((context as CompanyTagResponse)?.CompanyTeamTag?.Name)
                        </Template>
                        <EditorTemplate>
                            @{
                                var tag = (CompanyTagResponse) context;
                                <TelerikDropDownList @bind-Value="@tag.CompanyTeamTag!.UId"
                                                     ValueField="@nameof(CompanyTagResponse.UId)"
                                                     TextField="@nameof(CompanyTagResponse.Name)"
                                                     DefaultText="Select Tag"
                                                     Data="@_cascadedTags">
                                    <DropDownListSettings>
                                        <DropDownListPopupSettings Height="auto" MaxHeight="200px" />
                                    </DropDownListSettings>
                                </TelerikDropDownList>
                            }
                        </EditorTemplate>
                    </GridColumn>
                }
                <GridColumn Field="MasterTag.UId" Title="Parent">
                    <Template>
                        @((context as CompanyTagResponse)?.MasterTag?.Name)
                    </Template>
                    <EditorTemplate>
                        @{
                            var tag = (CompanyTagResponse) context;
                            <TelerikDropDownList @bind-Value="@tag.MasterTag!.UId"
                                                 ValueField="@nameof(CompanyTagResponse.UId)"
                                                 TextField="@nameof(CompanyTagResponse.Name)"
                                                 DefaultText="Select Parent Tag"
                                                 Data="@_currentMasterTags">
                                <DropDownListSettings>
                                    <DropDownListPopupSettings Height="auto" MaxHeight="200px" />
                                </DropDownListSettings>
                            </TelerikDropDownList>
                        }
                    </EditorTemplate>
                </GridColumn>
                <GridCommandColumn>
                    <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
                    <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
                </GridCommandColumn>
            </GridColumns>
            <GridSettings>
                <GridPopupEditSettings Title="@_gridTitle"></GridPopupEditSettings>
            </GridSettings>
        </TelerikGrid>
    }
</div>
@code {
    [Parameter] public string TabType { get; set; } = "Team";
    [Parameter] public Guid CompanyUId { get; set; }
 //   [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    private bool CategoryEditMode { get; set; }
    private CompanyCategoryResponse? _selectedCategory;
    private List<CompanyCategoryResponse> _gridCategories = new();
    private List<CompanyTagResponse> _tags = new();
    private List<string> _types = new() { "All", "Individual", "Team", "MultiTeam", "Enterprise" };
    private string _gridTitle = "Category";
    
    private List<CompanyCategoryResponse> _currentCompanyCategories = new();
    private List<CompanyTagResponse> _cascadedTags = new();
    
    private List<CompanyMasterTagCategoryResponse> _masterTagCategories = new();
    private List<CompanyMasterTagCategoryResponse> _currentMasterTagCategories = new();
    
    private List<CompanyMasterTagResponse> _masterTags = new();
    private List<CompanyMasterTagResponse> _currentMasterTags = new();
    

    protected override async Task OnParametersSetAsync()
    {
        var response = await Http.GetAsync($"api/Company{TabType}Categories/{CompanyUId}");
        _gridCategories = await response.Content.ReadFromJsonAsync<List<CompanyCategoryResponse>>() ?? new List<CompanyCategoryResponse>();
        
        var masterTagCategoriesResponse = await Http.GetAsync($"api/MasterTagCategories");
        _masterTagCategories  = await masterTagCategoriesResponse.Content.ReadFromJsonAsync<List<CompanyMasterTagCategoryResponse>>() ?? new List<CompanyMasterTagCategoryResponse>();
        
        if (TabType == "TeamMember")
        {
            _currentCompanyCategories= await Http.GetFromJsonAsync<List<CompanyCategoryResponse>>($"api/CompanyTeamCategories/with-tags/{CompanyUId}") ?? new List<CompanyCategoryResponse>();
        }
    }

    private void AddCategoryHandler(GridCommandEventArgs arg)
    {
        var category = (CompanyCategoryResponse)arg.Item;
        category.Type = "All";
        category.MasterTagCategory = new CompanyMasterTagCategoryResponse();
        _currentMasterTagCategories = _masterTagCategories.Where(x => x.ClassName == (TabType == "Skill" ? "MasterSkillsCategory" : $"Master{TabType}Category") && string.IsNullOrWhiteSpace(x.Type)).ToList();
        _gridTitle = "Add Category";
        
        CategoryEditMode = true;
    }
    
    private void  EditCategoryHandler(GridCommandEventArgs arg)
    {
        var category = (CompanyCategoryResponse)arg.Item;
        category.MasterTagCategory ??= new CompanyMasterTagCategoryResponse();
        _currentMasterTagCategories = _masterTagCategories.Where(x => x.ClassName == (TabType == "Skill" ? "MasterSkillsCategory" : $"Master{TabType}Category")).ToList();

        if (category.Type == string.Empty)
        {
            category.Type = "All";
            _currentMasterTagCategories = _currentMasterTagCategories.Where(x => string.IsNullOrWhiteSpace(x.Type)).ToList();
        }
        else
        {
            _currentMasterTagCategories = _currentMasterTagCategories.Where(x => x.Type == category.Type || string.IsNullOrWhiteSpace(x.Type) ).ToList();
        }
        _gridTitle = "Edit Category";
        CategoryEditMode = true;
    }
    
    private async Task CreateCategoryHandler(GridCommandEventArgs arg)
    {
        var category = (CompanyCategoryResponse)arg.Item;
        var categoryToSubmit = new CompanyCategoryResponse
        {
            Name = category.Name,
            Type = category.Type,
            MasterTagCategory = category.MasterTagCategory?.UId == Guid.Empty ? null : category.MasterTagCategory,
            Company = new CompanyResponse{ UId = CompanyUId }
        };
        var response = await Http.PostAsJsonAsync($"api/Company{TabType}Categories", categoryToSubmit);
        
        _gridCategories.Add(await response.Content.ReadFromJsonAsync<CompanyCategoryResponse>() ?? new CompanyCategoryResponse());
        
        CategoryEditMode = false;
    }
    
    private async Task UpdateCategoryHandler(GridCommandEventArgs arg)
    {
        var category = (CompanyCategoryResponse)arg.Item;

        category.MasterTagCategory ??= new CompanyMasterTagCategoryResponse();

        category.MasterTagCategory = category.MasterTagCategory?.UId == Guid.Empty ? null : category.MasterTagCategory;
        
        var response = await Http.PutAsJsonAsync($"api/Company{TabType}Categories", category);
        
        var updatedCategory = await response.Content.ReadFromJsonAsync<CompanyCategoryResponse>() ?? new CompanyCategoryResponse();
        
        var index = _gridCategories.FindIndex(x => x.UId == updatedCategory.UId);
        _gridCategories[index] = updatedCategory;
        CategoryEditMode = false;
    }
    
    private async Task DeleteCategoryHandler(GridCommandEventArgs arg)
    {
        var category = (CompanyCategoryResponse)arg.Item;
        
        var response = await Http.DeleteAsync($"api/Company{TabType}Categories/{category.UId}");
        
        if (response.IsSuccessStatusCode)
        {
            _gridCategories.Remove(category);
        }
    }
    
    private void CancelCategoryHandler(GridCommandEventArgs arg)
    {
        CategoryEditMode = false;
    }  
    private void  CategoryTypeChanged(object arg)
    {
        _currentMasterTagCategories = _masterTagCategories.Where(x => x.ClassName == (TabType == "Skill" ? "MasterSkillsCategory" : $"Master{TabType}Category")).ToList();
         var type = (string)arg;
        if (type != "All")
        {
            _currentMasterTagCategories = _currentMasterTagCategories.Where(x => x.Type == type || string.IsNullOrWhiteSpace(x.Type)).ToList();
        }
        StateHasChanged();
    }

    private async Task CategoryClicked(GridRowClickEventArgs arg)
    {
        var category = (CompanyCategoryResponse)arg.Item;
        var response = await Http.GetAsync($"api/Company{TabType}Tags/{category.UId}");
        _tags = await response.Content.ReadFromJsonAsync<List<CompanyTagResponse>>() ?? new List<CompanyTagResponse>();
        StateHasChanged();
        _selectedCategory = category;

        if (category.MasterTagCategory != null)
        {
            _masterTags = await Http.GetFromJsonAsync<List<CompanyMasterTagResponse>>($"api/MasterTags/Category/{category.MasterTagCategory.UId}") ?? new List<CompanyMasterTagResponse>();
        }
    }

    private void AddTagHandler(GridCommandEventArgs arg)
    {
        var tag = (CompanyTagResponse)arg.Item;
        tag.MasterTag = new CompanyMasterTagResponse();
        tag.CompanyTeamTag = new CompanyTagResponse
        {
            CompanyCategory = new CompanyCategoryResponse()
        };
        _gridTitle = "Add Tag";
    }
    
    private void EditTagHandler(GridCommandEventArgs arg)
    {
        var tag = (CompanyTagResponse)arg.Item;
        tag.MasterTag ??= new CompanyMasterTagResponse();
        tag.CompanyTeamTag ??= new CompanyTagResponse
        {
            CompanyCategory = new CompanyCategoryResponse()
        };
        _gridTitle = "Edit Tag";
        
        _cascadedTags = _currentCompanyCategories.FirstOrDefault(x => x.UId == tag.CompanyTeamTag?.CompanyCategory?.UId)?.Tags ?? new List<CompanyTagResponse>();

        _currentMasterTags = _masterTags;
    }
    
    private Task CreateTagHandler(GridCommandEventArgs arg)
    {
        throw new NotImplementedException();
    }
    
    private Task UpdateTagHandler(GridCommandEventArgs arg)
    {
        throw new NotImplementedException();
    }
    
    private Task DeleteTagHandler(GridCommandEventArgs arg)
    {
        throw new NotImplementedException();
    }

    private void CurrentCategoryChanged(object obj)
    {
        var categoryUId = (Guid)obj;
        _cascadedTags = _currentCompanyCategories.FirstOrDefault(x => x.UId == categoryUId)?.Tags ?? new List<CompanyTagResponse>();

    }

}
<style>
    .tags-forty{
        display: inline-block;
        width: 45%;
        float: left;
        padding: 0 10px;
        
    }
    .k-master-row{
        cursor: pointer;
    }
</style>